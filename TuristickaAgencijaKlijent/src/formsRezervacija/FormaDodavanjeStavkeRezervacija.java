/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package formsRezervacija;

import controller.KlijentskiKontroler;
import domain.Destinacija;
import domain.Rezervacija;
import domain.StavkaRezervacije;
import java.awt.Window;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import models.TableModelStavkeRezervacije;

/**
 *
 * @author Lenovo
 */
public class FormaDodavanjeStavkeRezervacija extends javax.swing.JDialog {
    Rezervacija pomocna = null;
    TableModelStavkeRezervacije modelSR;
    /**
     * Creates new form FormaDodavanjeStavkeRezervacija
     */
    public FormaDodavanjeStavkeRezervacija(Window parent, boolean modal, Rezervacija r) {
        super(parent, modal ? ModalityType.APPLICATION_MODAL : ModalityType.MODELESS);
        initComponents();
        setLocationRelativeTo(null);
        pomocna=r;
        TableModelStavkeRezervacije model = new TableModelStavkeRezervacije(r);
        Thread th = new Thread(model);
        th.start();
        jTableStavkeRezervacije.setModel(model);
        this.refreshTable();
        this.popuniDestinacije();
        modelSR=model;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jTextFieldNaziv = new javax.swing.JTextField();
        jTextFieldOpis = new javax.swing.JTextField();
        jComboBoxDestinacija = new javax.swing.JComboBox();
        jTextFieldCena = new javax.swing.JTextField();
        jButtonObrisi = new javax.swing.JButton();
        jButtonDodaj = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStavkeRezervacije = new javax.swing.JTable();
        jButtonOtkazi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel5.setText("Naziv");

        jComboBoxDestinacija.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxDestinacija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDestinacijaActionPerformed(evt);
            }
        });

        jButtonObrisi.setText("Obrisi");
        jButtonObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonObrisiActionPerformed(evt);
            }
        });

        jButtonDodaj.setText("Dodaj");
        jButtonDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajActionPerformed(evt);
            }
        });

        jLabel6.setText("Opis");

        jLabel2.setText("Destinacija");

        jLabel3.setText("Cena");

        jTableStavkeRezervacije.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableStavkeRezervacije);

        jButtonOtkazi.setText("Otkazi");
        jButtonOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOtkaziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxDestinacija, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                        .addComponent(jButtonObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldCena, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldOpis, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonOtkazi, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOpis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDestinacija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDodaj)
                    .addComponent(jButtonObrisi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonOtkazi)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxDestinacijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDestinacijaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDestinacijaActionPerformed

    private void jButtonDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajActionPerformed
        try {
            if(jTextFieldNaziv.getText().isEmpty() || jTextFieldOpis.getText().isEmpty() || jTextFieldCena.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Sva polja moraju biti popunjena!", "Greska!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String naziv = jTextFieldNaziv.getText();
            String opis = jTextFieldOpis.getText();
            int cena = Integer.valueOf(jTextFieldCena.getText());
            
            if(naziv.length()>50){
                JOptionPane.showMessageDialog(this, "Naziv stavke mora imati manje od 50 slova!", "Greska!", JOptionPane.ERROR_MESSAGE);
                return;
            }else if(opis.length()>100){
                JOptionPane.showMessageDialog(this, "Opis stavke mora imati manje od 100 slova!", "Greska!", JOptionPane.ERROR_MESSAGE);
                return;
            }else if(cena<0){
                JOptionPane.showMessageDialog(this, "Cena mora biti pozitivan broj!", "Greska!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Destinacija destinacija = (Destinacija) jComboBoxDestinacija.getSelectedItem();
            
            StavkaRezervacije s = new StavkaRezervacije(null, pomocna, naziv, opis, destinacija, cena);
            KlijentskiKontroler.getInstance().addStavkaRezervacije(s);
            this.refreshTable();
            JOptionPane.showMessageDialog(this, "Uspesno dodata stavka rezervacije.", "Obavestenje!", JOptionPane.INFORMATION_MESSAGE);
            
            ArrayList<StavkaRezervacije> listaS = modelSR.getLista();
            int cenaR=0;
            for (StavkaRezervacije stavkaRezervacije : listaS) {
                cenaR=cenaR+stavkaRezervacije.getCena();
            }
            pomocna.setCena(cenaR);
            KlijentskiKontroler.getInstance().updateRezervacija(pomocna);
        } catch (Exception ex) {
            Logger.getLogger(FormaDodavanjeStavkeRezervacija.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDodajActionPerformed

    private void jButtonOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOtkaziActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonOtkaziActionPerformed

    private void jButtonObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonObrisiActionPerformed
        int row = jTableStavkeRezervacije.getSelectedRow();
        
        if(row>=0){
            StavkaRezervacije sr = ((TableModelStavkeRezervacije) jTableStavkeRezervacije.getModel()).getSelectedStavkaRezervacije(row);
            int result = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da "
                    + "obrisete ovu stavku? " + sr.toString(), "Konfirmacija", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.NO_OPTION) {
                return;
            }

            if (result == JOptionPane.YES_OPTION) {
                try {
                    KlijentskiKontroler.getInstance().deleteStavkaRezervacije(sr);
                    this.refreshTable();
                    JOptionPane.showMessageDialog(this, "Uspesno obrisana stavka.");
                    
                    ArrayList<StavkaRezervacije> listaS = modelSR.getLista();
                    int cenaR=0;
                    for (StavkaRezervacije stavkaRezervacije : listaS) {
                        cenaR=cenaR+stavkaRezervacije.getCena();
                    }
                    pomocna.setCena(cenaR);
                    KlijentskiKontroler.getInstance().updateRezervacija(pomocna);
                } catch (Exception ex) {
                    Logger.getLogger(FormaDodavanjeStavkeRezervacija.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Morate odabrati stavku rezervacije!", "Obavestenje!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonObrisiActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDodaj;
    private javax.swing.JButton jButtonObrisi;
    private javax.swing.JButton jButtonOtkazi;
    private javax.swing.JComboBox jComboBoxDestinacija;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableStavkeRezervacije;
    private javax.swing.JTextField jTextFieldCena;
    private javax.swing.JTextField jTextFieldNaziv;
    private javax.swing.JTextField jTextFieldOpis;
    // End of variables declaration//GEN-END:variables
    void refreshTable(){
        TableModelStavkeRezervacije tm = (TableModelStavkeRezervacije) jTableStavkeRezervacije.getModel();
        tm.refreshTable();
    }
    
    private void popuniDestinacije() {
        try {
            ArrayList<Destinacija> destinacije = KlijentskiKontroler.getInstance().getAllDestinacija();

            jComboBoxDestinacija.removeAllItems();
            
            for (Destinacija destinacija : destinacije) {
                jComboBoxDestinacija.addItem(destinacija);
            }

        } catch (Exception ex) {
            Logger.getLogger(FormaDodavanjeStavkeRezervacija.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
